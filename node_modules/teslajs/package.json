{
  "name": "teslajs",
  "version": "2.0.14",
  "description": "Full-featured Tesla REST API NodeJS package",
  "dependencies": {
    "colors": "^1.1.2",
    "commander": "^2.9.0",
    "promise": "^7.1.1",
    "request": "^2.14.0"
  },
  "bugs": {
    "url": "https://github.com/mseminatore/TeslaJS/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mseminatore/TeslaJS.git"
  },
  "main": "TeslaJS.js",
  "scripts": {
    "test": "jshint TeslaJS.js Examples && ./node_modules/.bin/istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js --verbose"
  },
  "keywords": [
    "Tesla",
    "Model S",
    "Model X",
    "Model 3",
    "REST"
  ],
  "author": {
    "name": "Mark Seminatore",
    "url": "https://github.com/mseminatore/TeslaJS"
  },
  "license": "MIT",
  "devDependencies": {
    "coveralls": "^2.11.15",
    "istanbul": "^0.4.5",
    "jshint": "^2.9.4",
    "mocha": "^3.1.2",
    "sepia": "^2.0.2"
  },
  "gitHead": "d415854dcab39b859df398af9905164a6c2fd86c",
  "readme": "# TeslaJS \r\n[![Version](http://img.shields.io/npm/v/teslajs.png)](https://www.npmjs.org/package/teslsjs)\r\n[![License](https://img.shields.io/npm/l/teslajs.svg)](https://github.com/mseminatore/TeslaJS/blob/master/LICENSE)\r\n[![Downloads](https://img.shields.io/npm/dt/teslajs.svg)]()\r\n[![Build Status](https://travis-ci.org/mseminatore/TeslaJS.svg?branch=master)](https://travis-ci.org/mseminatore/TeslaJS)\r\n[![Coverage Status](https://coveralls.io/repos/github/mseminatore/TeslaJS/badge.svg?branch=master)](https://coveralls.io/github/mseminatore/TeslaJS?branch=master)\r\n\r\nAn unofficial NodeJS library that encapsulates the Tesla RESTful API.  This library currently supports all existing Tesla\r\nvehicles.\r\n\r\n[![NPM](https://nodei.co/npm/teslajs.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/teslajs/)\r\n[![NPM](https://nodei.co/npm-dl/teslajs.png)](https://nodei.co/npm/teslajs/)\r\n\r\nFirst, it is important to acknowledge that there are already several very good Javascript libraries available for the Tesla.  So \r\nwhy create another one?  Rather than contribute to or modify one or more of the existing libraries, this library was \r\ncreated for two main reasons:\r\n\r\n1. The anticipated need for a few small but important features that existing libraries did not provide\r\n2. I was looking for a personal opportunity to learn more about the Tesla REST API, NodeJS, Express and Git/GitHub\r\n\r\n## Notable Features\r\n\r\nWith the introduction of the new OAuth-based owner API, one of the features I wanted was the ability to make API calls\r\nwithout having to login each time a new process was invoked.  Many existing libraries require a login transaction with each \r\ninitiation of the library.  With the TeslaJS library, once an auth token is retrieved it can be cached and used to make other \r\nTesla REST API calls.  For certain use cases, notably server logging of multiple vehicles, this can be important for moderating\r\nload on the Tesla login servers.  \r\n\r\nThis is also important if you want to use the library to do server-based data logging.  It is generally safer to store an OAuth \r\ntoken on the server rather than logon credentials.  If the server is compromised only the OAuth token is at risk and all existing \r\ntokens can be invalidated by changing the password on the account.\r\n\r\nAnother feature that I wanted was API stateless-ness (achieved via an **options** parameter to API calls) so that it was \r\npossible to use the library to make multiple overlapping async calls for different vehicles for data-logging.\r\n\r\n## Project Principles\r\n\r\nThis project has a few principles that have and will continue to guide its development.\r\n\r\n1. **Dependency lean**.  Try to keep the required dependencies to a minimum.\r\n2. **Comprehensive**.  Attempt to expose the full Tesla REST API surface area.\r\n3. **Simple**.  Using the library should be simple and straightforward following common conventions.\r\n4. **Server friendly**.  Provide for use based on auth tokens and avoid requiring access to passwords.\r\n\r\n## Contributing\r\n\r\nContributions are welcome!  Pull requests will be considered with the following guidelines.\r\n\r\n1. Must pass `npm test` and `wintest` tests\r\n2. Should meet or exceed current code coverage level\r\n3. Must respect and align to Project Principles (see above)\r\n4. Must add general value to the project\r\n5. Project owners reserve the right to accept or reject any PR for any reason\r\n\r\n## What's New!\r\n\r\nHere are some of the most recent features and fixes:\r\n\r\n1. In **1.0.54** Last update for version 1.x.x!  Test and code coverage implemented.\r\n2. In **2.0.0** Big changes!  Changed callback style to Nodeback AND added *Async versions using Promises!\r\n3. In **2.0.4** Finished refactoring samples to use new common sample framework.  Much simpler\r\n4. The **testla** sample has been renamed **teslamock** and factored into its \r\nown [project](https://github.com/mseminatore/teslamock).\r\n5. The **vehicles()** call now sets the **vehicleID** on **options** for you!\r\n\r\n## Known Issues\r\n\r\n1. The homelink API appears to require Autopilot.  Can someone with AP test and report back?\r\n2. Calendar support not yet functional.  If someone can share the JSON for a valid calendar request that would help!\r\n\r\n# Tesla API Documentation\r\n\r\nThe Tesla REST API encapusulated by this library was documented through the collaboration of many Tesla owners.  Please\r\nthank and support them for their efforts.  The current REST API documentation can be found at:\r\n\r\n    http://docs.timdorr.apiary.io/\r\n\t\r\n# Warranty Disclaimer\r\n\r\nYou may use this library with the understanding that doing so is **AT YOUR OWN RISK**.  No warranty, express or implied, \r\nis made with regards to the fitness or safety of this code for any purpose.  If you use this library to query or change \r\nsettings of your vehicle you understand that it is possible to make changes that could inadvertently lower the security \r\nof your vehicle, or cause damage, through actions including but not limited to:\r\n\r\n* Unlocking the vehicle\r\n* Remotely starting the vehicle\r\n* Opening the sunroof\r\n* Opening the frunk or trunk\r\n* Lowering the battery charge level\r\n* Impacting the long-term health of your battery\r\n\r\n# Installation\r\n\r\nIn order to use the library and/or samples you must first download and install [NodeJS](http://nodejs.org).\r\n\r\nAn installable module for [npm](http://npmjs.org) is now available.  To download and install the library and all of its \r\ndependencies to a local project directory use the following:\r\n\r\n    npm install teslajs\r\n\r\nIf you are building an npm package that depends upon this library then you will want to use the **--save** parameter in \r\norder to update the **package.json** file for your package as follows:\r\n\r\n    npm install teslajs --save\r\n    \r\nIf you prefer to download and install the library globally for all future node projects you may use:\r\n\r\n    npm install -g teslajs\r\n\r\nYou may also install directly from the GitHub [source](https://github.com/mseminatore/TeslaJS).  Either download and \r\nunzip the source, or clone the repository.\r\n\r\n>Remember, whether you install via npm, ZIP source or Git clone you must install the dependencies before using TeslaJS.\r\n\r\nTo install dependencies via npm, from the root level of the library directory type:\r\n\r\n    npm install\r\n\r\nThis library and its accomanying samples are under active development.  New features, samples and bug fixes are being added\r\nregularly.  To ensure that you have the very latest version of TeslaJS and it's dependencies be sure to update frequently.\r\n\r\nTo do so, from your project directory type:\r\n\r\n    npm update\r\n\r\n# Usage Examples\r\n\r\n## Login Example\r\n\r\nAs you can see below, it is very simple to login and acquire an OAuth token.\r\n\r\n```javascript\r\n    var tjs = require('TeslaJS');\r\n\r\n    var username = \"<your MyTesla email>\";\r\n    var password = \"<your MyTesla password>\";\r\n\r\n    tjs.login(username, password, function(err, result) {\r\n        if (result.error) {\r\n          console.log(JSON.stringify(result.error));\r\n          process.exit(1);\r\n        }\r\n\r\n        var token = JSON.stringify(result.authToken);\r\n\r\n        if (token)\r\n            console.log(\"Login Successfull!\");\r\n    });\r\n```\r\n\r\n>Note: Currently the only way to invalidate an issued token is to change your MyTesla account password.  Therefore, you must \r\n>take care to properly secure tokens.  Do not share them over an unsecure connection, or store them on a public machine.\r\n\r\n## Vehicles Example\r\n\r\nWith the OAuth token from a successful `login()` call you can query the vehicles for the account:\r\n\r\n```javascript\r\n    var options = { authToken: result.authToken };\r\n    tjs.vehicles(options, function (err, vehicle) {\r\n        console.log(\"Vehicle \" + vehicle.vin + \" is: \" + vehicle.state);\r\n    });\r\n```\r\n\r\nOr using the new Async Promise-based calls:\r\n\r\n```javascript\r\n\ttjs.vehiclesAsync(options).then(function(vehicle) {\r\n        console.log(\"Vehicle \" + vehicle.vin + \" is: \" + vehicle.state);\r\n\t});\r\n```\r\n\r\n## Charge State Example\r\n\r\nAdding the vehicle ID from a successful `vehicles()` call to options you can make other Tesla REST calls:\r\n\r\n```javascript\r\n    tjs.chargeState(options, function (err, chargeState) {\r\n        console.log(\"Current charge level: \" + chargeState.battery_level + '%');\r\n    });\r\n```\r\n\r\nAnd using the new Async Promise-based calls:\r\n\r\n```javascript\r\n\ttjs.chargeStateAsync(options).then(function(chargeState) {\r\n        console.log(\"Current charge level: \" + chargeState.battery_level + '%');\r\n\t});\r\n```\r\n\r\n# Library Interfaces\r\n\r\nThe TeslaJS library exports a number of methods and constants.  The library also responds to some environment variables.\r\n\r\n**Environment Variables**\r\n\r\n    TESLAJS_LOG        - if set defines the value of the default logging level\r\n\tTESLAJS_SERVER     - if set defines the URI for the Tesla servers (e.g. set to http://127.0.0.1:3000)\r\n\r\n**General API calls**\r\n\r\n    setLogLevel()      - sets the level of debug logging\r\n    getLogLevel()      - gets the level of debug logging\r\n\tsetPortalBaseURI() - sets the server for testing, pass null to reset\r\n\tgetPortalBaseURI() - gets the server URI\r\n    login()            - authenticate with Tesla servers and retrieve the OAuth token\r\n\tloginAsync()\t   - same as above but returns a Promise\r\n    logout()           - delete the current OAuth token\r\n\tlogoutAsync()\t   - same as above but returns a Promise\r\n    vehicles()         - retrieve list of vehicles and option data\r\n\tvehiclesAsync()\t   - same as above but returns a Promise\r\n\t\r\n**NodeJS Callback (nodeback) style API calls for a given vehicle id**\r\n\t\r\n    chargeState()      - retrieve the charge_state data\r\n    chargeStandard()   - set the charge limit to 90%\r\n    chargeMaxRange()   - sets the charge limit to 100%\r\n    climateState()     - retrieve the climate_state data\r\n    climateStart()     - turn on the HVAC system\r\n    climateStop()      - turn off the HVAC system\r\n    closeChargePort()  - close the charge port on appropriately equipped vehicles\r\n    doorLock() \t       - locks the doors\r\n    doorUnlock()       - unlocks the doors\r\n    driveState()       - retrieve the drive_state data\r\n    flashLights()      - flashes the headlights\r\n    guiSettings()      - retrieves the GUI settings\r\n    homelink()         - Triggers homelink from the vehicle\r\n\thonkHorn()         - honks the horn\r\n    mobileEnabled()    - returns whether mobile access is enabled\r\n    startCharge()      - initiates a charging session\r\n    stopCharge()       - terminates a charging session\r\n    openChargePort()   - opens the charge port\r\n    openTrunk()        - open the trunk or frunk\r\n    remoteStart()      - enables remote starting of the car\r\n    resetValetPin()    - reset the valet pin\r\n    setChargeLimit()   - sets the charge limit to a specific amount\r\n    setTemps() \t       - set driver/passenger temp set points (in Deg.C)\r\n    setValetMode()     - set/reset valet mode\r\n    startStreaming()   - initiate a streaming data session\r\n    sunRoofControl()   - put the sunroof into a specific state\r\n    sunRoofMove()      - open the sunroof to a specific percent\r\n    vehicleState()     - retrieve the vehicle_state data\r\n    wakeUp() \t       - attempt to wake a sleeping vehicle\r\n\t\r\n**Promise based API calls for a given vehicle id**\r\n\t\r\n    chargeStateAsync()      - retrieve the charge_state data\r\n    chargeStandardAsync()   - set the charge limit to 90%\r\n    chargeMaxRangeAsync()   - sets the charge limit to 100%\r\n    climateStateAsync()     - retrieve the climate_state data\r\n    climateStartAsync()     - turn on the HVAC system\r\n    climateStopAsync()      - turn off the HVAC system\r\n    closeChargePortAsync()  - close the charge port on appropriately equipped vehicles\r\n    doorLockAsync() \t    - locks the doors\r\n    doorUnlockAsync()       - unlocks the doors\r\n    driveStateAsync()       - retrieve the drive_state data\r\n    flashLightsAsync()      - flashes the headlights\r\n    guiSettingsAsync()      - retrieves the GUI settings\r\n    homelinkAsync()         - Triggers homelink from the vehicle\r\n\thonkHornAsync()         - honks the horn\r\n    mobileEnabledAsync()    - returns whether mobile access is enabled\r\n    startChargeAsync()      - initiates a charging session\r\n    stopChargeAsync()       - terminates a charging session\r\n    openChargePortAsync()   - opens the charge port\r\n    openTrunkAsync()        - open the trunk or frunk\r\n    remoteStartAsync()      - enables remote starting of the car\r\n    resetValetPinAsync()    - reset the valet pin\r\n    setChargeLimitAsync()   - sets the charge limit to a specific amount\r\n    setTempsAsync() \t    - set driver/passenger temp set points (in Deg.C)\r\n    setValetModeAsync()     - set/reset valet mode\r\n    startStreamingAsync()   - initiate a streaming data session\r\n    sunRoofControlAsync()   - put the sunroof into a specific state\r\n    sunRoofMoveAsync()      - open the sunroof to a specific percent\r\n    vehicleStateAsync()     - retrieve the vehicle_state data\r\n    wakeUpAsync() \t        - attempt to wake a sleeping vehicle\r\n\r\n**Library exported constants**\r\n\r\n\tstreamingPortal    - the URI for the streaming API portal\r\n\tportal \t           - the base URI for the OAuth-based API portal\r\n\tAPI_LOG_ALWAYS     - log this message always\r\n\tAPI_CALL_LEVEL \t   - log all API calls\r\n\tAPI_RETURN_LEVEL   - log all API calls and completions\r\n\tAPI_REQUEST_LEVEL  - log all API requests\r\n\tAPI_RESPONSE_LEVEL - log all API responses\r\n\tAPI_BODY_LEVEL     - log calls and completions as well as the body of POST commands\r\n\tAPI_LOG_ALL        - the highest level of logging\r\n\tCHARGE_STORAGE     - charge to 50%\r\n\tCHARGE_STANDARD    - charge to 90%\r\n\tCHARGE_RANGE       - charge to 100%.  Tesla recommends against frequent usage!\r\n\tSUNROOF_OPEN       - fully opens the sunroof\r\n\tSUNROOF_CLOSED     - closes the sunroof\r\n\tSUNROOF_VENT       - open the sunroof to the vent position\r\n\tSUNROOF_COMFORT\t   - open the sunroof to the comfort position\r\n\tstreamingColumns   - an array of the available streaming columns\r\n\r\nMost of the APIs take both an **options** parameter and an optional **callback** function.  The **options** parameter must always\r\ncontain a member called **authToken** that contains the OAuth token returned from a successfull **login()**.  For all APIs that \r\nact on a specific vehicle the **options** parameter must also contain a **vehicleID** member that contains the long vehicle ID value returned from a successful call to **vehicles()**.\r\n\r\nBy default the **vehicles()** API returns information on the first vehicle returned.  By providing a **carIndex** member in the\r\n**options** parameter information on a specific vehicle can be queried.\r\n\t\r\n# Samples\r\n\r\nA number of samples are provided in the Examples directory.  These demonstrate some basic usage scenarios for \r\nthe library.  To use the samples first:\r\n\r\n    cd Examples\r\n\r\nAfter running the **login** sample an auth token will be cached locally.  If you prefer to avoid keeping an auth token on\r\nyour machine, provide login credentials on the command line for each sample.  This will perform a login request and \r\nkeep the token only for the duration of the sample.  The difference lies in whether you are more comfortable with the security \r\nof a file associated with an account in your file system vs. the visibility of your login credentials in the process \r\ntable for the lifetime of the sample.\r\n\r\n## List of Samples\r\n\r\n    login          - Login and acquire an OAuth token.  Cached to the local directory\r\n    logout         - Delete the locally cached OAuth token if present\r\n    climate        - Display the current state of the HVAC system\r\n    climateStart   - Turn on the HVAC system\r\n    climateStop    - Turn off the HVAC system\r\n    flashLights    - Flash the headlights\r\n    geoloc         - Display the current GPS location of the vehicle\r\n\tguiSettings    - Display the current unit format settings\r\n\thomelink       - Trigger homelink (note appears to require AP hardware)\r\n    honkHorn       - Honk the horn\r\n\tmobileEnabled  - Display whether remote access is enabled\r\n    odometer       - Displays the current odometer value\r\n    openChargePort - Opens the charge port\r\n    resetValetPin  - Resets the valet mode pin\r\n\tremoteStart    - Enables driving without the key fob present\r\n\tsetChargeLimit - Set the battery charge limit to the given value\r\n\tsetTemps       - Set the driver and passenger temperatures to the given value\r\n\tsimpleStreaming- Demonstrates basic use of the streaming API\r\n    soc            - Displays the current battery State of Charge (SOC) for the vehicle\r\n    startCharge    - Initiate a charging session\r\n    stopCharge     - Terminate a charging session\r\n\tsunroof        - Control the sunroof.  Be careful!\r\n    valet          - Enable or disable valet mode\r\n    vehicle        - Retrieve and display information on the current vehicle state\r\n    wakeup         - Send a wakeup command to the vehicle\r\n\t\r\n## login.js\r\n\r\nThis sample demonstrates the basic login process which returns the OAuth token required for other API calls.  The sample\r\nwrites out a file called **.token** which stores the OAuth token.  Other samples will use this cached token if present \r\nto avoid the need to enter the **username** and **password** and login via the Tesla servers.\r\n\r\n>If you prefer not to have your OAuth token stored locally do not run this sample.  Instead you may run the samples and provide \r\n>the **username** and **password** each time on the command line.\r\n\r\nUsage:\r\n\r\n    node login.js [options] username password\r\n\t\r\n\tOptions:\r\n\t\r\n    -h, --help               output usage information\r\n    -U, --uri [string]       URI of test server (e.g. http://127.0.0.1:3000)\r\n\t\r\n## logout.js\r\n\r\nThis sample deletes the locally cached **.token** file if present.\r\n\r\nUsage:\r\n\r\n    node logout.js\r\n\t\r\n## climate.js\r\n\r\nThis sample retrieves and displays the **climate_state** data on the HVAC system of the vehicle.\r\n\r\nUsage:\r\n\r\n    node climate.js [options]\r\n\t\r\n\tOptions:\r\n\t\r\n    -h, --help               output usage information\r\n\t-u, --username [string]  username (needed only if token not cached)\r\n\t-p, --password [string]  password (needed only if token not cached)\t\r\n    -i, --index <n>          vehicle index (first car by default)\r\n    -U, --uri [string]       URI of test server (e.g. http://127.0.0.1:3000)\r\n\t\r\n## climateStart.js\r\n\r\nThis sample demonstrates turning on the HVAC system of the vehicle.\r\n\r\nUsage:\r\n\r\n    node climateStart.js [options]\r\n\t\r\n\tOptions:\r\n\t\r\n    -h, --help               output usage information\r\n\t-u, --username [string]  username (needed only if token not cached)\r\n\t-p, --password [string]  password (needed only if token not cached)\t\r\n    -i, --index <n>          vehicle index (first car by default)\r\n    -U, --uri [string]       URI of test server (e.g. http://127.0.0.1:3000)\r\n\r\n## climateStop.js\r\n\r\nThis sample demonstrates turning off the HVAC system of the vehicle.\r\n\r\nUsage:\r\n\r\n    node climateStop.js [options]\r\n\t\r\n\tOptions:\r\n\t\r\n    -h, --help               output usage information\r\n\t-u, --username [string]  username (needed only if token not cached)\r\n\t-p, --password [string]  password (needed only if token not cached)\t\r\n    -i, --index <n>          vehicle index (first car by default)\r\n    -U, --uri [string]       URI of test server (e.g. http://127.0.0.1:3000)\r\n\r\n## flashLights.js\r\n\r\nThis sample demonstrates flashing the headlights of the vehicle.\r\n\r\nUsage:\r\n\r\n    node flashLights.js [options]\r\n\t\t\r\n\tOptions:\r\n\t\r\n    -h, --help               output usage information\r\n\t-u, --username [string]  username (needed only if token not cached)\r\n\t-p, --password [string]  password (needed only if token not cached)\t\r\n    -i, --index <n>          vehicle index (first car by default)\r\n    -U, --uri [string]       URI of test server (e.g. http://127.0.0.1:3000)\r\n\r\n## geoloc.js\r\n\r\nThis sample retrieves and displays information on the location and driving state of the car using the **drive_state** query.\r\n\r\nUsage:\r\n\r\n    node geoloc.js [options]\r\n\t\r\n\tOptions:\r\n\t\r\n    -h, --help               output usage information\r\n\t-u, --username [string]  username (needed only if token not cached)\r\n\t-p, --password [string]  password (needed only if token not cached)\t\r\n\t-g, --geocode            geocode (reverse geocode to nearest address)\r\n    -i, --index <n>          vehicle index (first car by default)\r\n    -U, --uri [string]       URI of test server (e.g. http://127.0.0.1:3000)\r\n\r\n## guiSettings.js\r\n\r\nThis sample retrieves and displays the current display formats for the user interface.\r\n\r\nUsage:\r\n\r\n    node guiSettings.js [options]\r\n\t\r\n\tOptions:\r\n\t\r\n    -h, --help               output usage information\r\n\t-u, --username [string]  username (needed only if token not cached)\r\n\t-p, --password [string]  password (needed only if token not cached)\t\r\n    -i, --index <n>          vehicle index (first car by default)\r\n    -U, --uri [string]       URI of test server (e.g. http://127.0.0.1:3000)\r\n\r\n## homelink.js\r\n\r\nThis sample demonstrates triggering homelink via the vehicle.\r\n\r\n>Note: This feature appears to be tied to the presence of Autopilot hardware and software.  Looking for validation\r\n>on both AP and pre-AP vehicles. \r\n\r\nUsage:\r\n\r\n    node homelink.js [options]\r\n\t\r\n\tOptions:\r\n\t\r\n    -h, --help               output usage information\r\n\t-u, --username [string]  username (needed only if token not cached)\r\n\t-p, --password [string]  password (needed only if token not cached)\t\r\n    -i, --index <n>          vehicle index (first car by default)\r\n\t-n, --name [string]      Either phone Bluetooth name or homelink door name\r\n    -U, --uri [string]       URI of test server (e.g. http://127.0.0.1:3000)\r\n\t\r\n## honkHorn.js\r\n\r\nThis sample demonstrates honking the horn of the vehicle.\r\n\r\nUsage:\r\n\r\n    node honkHorn.js [options]\r\n\t\r\n\tOptions:\r\n\t\r\n    -h, --help               output usage information\r\n\t-u, --username [string]  username (needed only if token not cached)\r\n\t-p, --password [string]  password (needed only if token not cached)\t\r\n    -i, --index <n>          vehicle index (first car by default)\r\n    -U, --uri [string]       URI of test server (e.g. http://127.0.0.1:3000)\r\n\r\n## mobileEnabled.js\r\n\r\nThis sample retrieves and displays whether mobile access is enabled.\r\n\r\nUsage:\r\n\r\n    node mobileEnabled.js [options]\r\n\t\r\n\tOptions:\r\n\t\r\n    -h, --help               output usage information\r\n\t-u, --username [string]  username (needed only if token not cached)\r\n\t-p, --password [string]  password (needed only if token not cached)\t\r\n    -i, --index <n>          vehicle index (first car by default)\r\n    -U, --uri [string]       URI of test server (e.g. http://127.0.0.1:3000)\r\n\r\n## odometer.js\r\n\r\nThis sample retrieves and displays the current vehicle odometer value.\r\n\r\nUsage:\r\n\r\n    node odometer.js [options]\r\n\t\r\n\tOptions:\r\n\t\r\n    -h, --help               output usage information\r\n\t-u, --username [string]  username (needed only if token not cached)\r\n\t-p, --password [string]  password (needed only if token not cached)\t\r\n    -i, --index <n>          vehicle index (first car by default)\r\n    -U, --uri [string]       URI of test server (e.g. http://127.0.0.1:3000)\r\n\r\n## openChargePort.js\r\n\r\nThis sample sends the command to open the charge port.\r\n\r\nUsage:\r\n\r\n    node openChargePort.js [options]\r\n\t\r\n\tOptions:\r\n\t\r\n    -h, --help               output usage information\r\n\t-u, --username [string]  username (needed only if token not cached)\r\n\t-p, --password [string]  password (needed only if token not cached)\t\r\n    -i, --index <n>          vehicle index (first car by default)\r\n    -U, --uri [string]       URI of test server (e.g. http://127.0.0.1:3000)\r\n\r\n## remoteStart.js\r\n\r\nThis sample enables remotely starting the vehicle without a key fob present.  Note that the **password** parameter is \r\n**required** in this sample.\r\n\r\nUsage:\r\n\r\n    node remoteStart.js [options] password\r\n\t\r\n\tOptions:\r\n\t\r\n    -h, --help               output usage information\r\n\t-u, --username [string]  username (needed only if token not cached)\r\n    -i, --index <n>          vehicle index (first car by default)\r\n    -U, --uri [string]       URI of test server (e.g. http://127.0.0.1:3000)\r\n\r\n## resetValetPin.js\r\n\r\nThis sample attempts to reset the current valet pin.\r\n\r\nUsage:\r\n\r\n    node resetValetPin.js [options]\r\n\t\r\n\tOptions:\r\n\t\r\n    -h, --help               output usage information\r\n\t-u, --username [string]  username (needed only if token not cached)\r\n\t-p, --password [string]  password (needed only if token not cached)\t\r\n    -i, --index <n>          vehicle index (first car by default)\r\n    -U, --uri [string]       URI of test server (e.g. http://127.0.0.1:3000)\r\n\r\n## setChargeLimit.js\r\n\r\nThis sample sets the current battery charge limit to the given value.\r\n\r\nUsage:\r\n\r\n    node setChargeLimit.js [options] number|standard|storage|range\r\n\t\r\n\tOptions:\r\n\t\r\n    -h, --help               output usage information\r\n\t-u, --username [string]  username (needed only if token not cached)\r\n\t-p, --password [string]  password (needed only if token not cached)\t\r\n    -i, --index <n>          vehicle index (first car by default)\r\n    -U, --uri [string]       URI of test server (e.g. http://127.0.0.1:3000)\r\n\r\n## setTemps.js\r\n\r\nThis sample sets the driver and passenger temperature to the given value.\r\n\r\nUsage:\r\n\r\n    node setTemps.js [options] temperature\r\n\t\r\n\tOptions:\r\n\t\r\n    -h, --help               output usage information\r\n\t-u, --username [string]  username (needed only if token not cached)\r\n\t-p, --password [string]  password (needed only if token not cached)\t\r\n    -i, --index <n>          vehicle index (first car by default)\r\n    -U, --uri [string]       URI of test server (e.g. http://127.0.0.1:3000)\r\n\r\n## simpleStreaming.js\r\n\r\nThis sample demonstrates basic use of the streaming API to retrieve real-time vehicle data.\r\n\r\nUsage:\r\n\r\n    node simpleStreaming.js [options] username\r\n\t\r\n\tOptions:\r\n\t\r\n    -h, --help               output usage information\r\n\t-p, --password [string]  password (needed only if token not cached)\t\r\n    -i, --index <n>          vehicle index (first car by default)\r\n    -U, --uri [string]       URI of test server (e.g. http://127.0.0.1:3000)\r\n\r\n## soc.js\r\n\r\nThis sample retrieves the **charge_state** information and displays the charge limit, the current \r\nvehicle charge level, and the ideal, rated and projected range.\r\n\r\nUsage:\r\n\r\n    node soc.js [options]\r\n\t\r\n\tOptions:\r\n\t\r\n    -h, --help               output usage information\r\n\t-u, --username [string]  username (needed only if token not cached)\r\n\t-p, --password [string]  password (needed only if token not cached)\t\r\n    -i, --index <n>          vehicle index (first car by default)\r\n    -U, --uri [string]       URI of test server (e.g. http://127.0.0.1:3000)\r\n\r\n## startCharge.js\r\n\r\nThis sample demonstrates how to initiate a charging session.\r\n\r\nUsage:\r\n\r\n    node startCharge.js [options]\r\n\t\r\n\tOptions:\r\n\t\r\n    -h, --help               output usage information\r\n\t-u, --username [string]  username (needed only if token not cached)\r\n\t-p, --password [string]  password (needed only if token not cached)\t\r\n    -i, --index <n>          vehicle index (first car by default)\r\n    -U, --uri [string]       URI of test server (e.g. http://127.0.0.1:3000)\r\n\r\n## stopCharge.js\r\n\r\nThis sample demonstrates how to terminate a charging session.\r\n\r\nUsage:\r\n\r\n    node stopCharge.js [options]\r\n\t\r\n\tOptions:\r\n\t\r\n    -h, --help               output usage information\r\n\t-u, --username [string]  username (needed only if token not cached)\r\n\t-p, --password [string]  password (needed only if token not cached)\t\r\n    -i, --index <n>          vehicle index (first car by default)\r\n    -U, --uri [string]       URI of test server (e.g. http://127.0.0.1:3000)\r\n\r\n## sunroof.js\r\n\r\nThis sample demonstrates controlling the panoramic sunroof if present.\r\n\r\nUsage:\r\n\r\n    node sunroof.js [options] percentage|open|close|vent|comfort\r\n\t\r\n\tOptions:\r\n\t\r\n    -h, --help               output usage information\r\n\t-u, --username [string]  username (needed only if token not cached)\r\n\t-p, --password [string]  password (needed only if token not cached)\t\r\n    -i, --index <n>          vehicle index (first car by default)\r\n    -U, --uri [string]       URI of test server (e.g. http://127.0.0.1:3000)\r\n\r\n## vehicle.js\r\n\r\nThis sample retrives and displays several elements of data returned from the **vehicle_state** REST API. \r\n\r\nUsage:\r\n\r\n    node vehicle.js [options]\r\n\t\r\n\tOptions:\r\n\t\r\n    -h, --help               output usage information\r\n\t-u, --username [string]  username (needed only if token not cached)\r\n\t-p, --password [string]  password (needed only if token not cached)\r\n\t-i, --index <n>          vehicle index (first car by default)\r\n    -U, --uri [string]       URI of test server (e.g. http://127.0.0.1:3000)\r\n\r\n## valet.js\r\n\r\nThis sample enables or disables valet mode. \r\n\r\nUsage:\r\n\r\n    node valet.js [options] ON|OFF pincode\r\n\t\r\n\tOptions:\r\n\t\r\n    -h, --help               output usage information\r\n\t-u, --username [string]  username (needed only if token not cached)\r\n\t-p, --password [string]  password (needed only if token not cached)\t\r\n    -i, --index <n>          vehicle index (first car by default)\r\n    -U, --uri [string]       URI of test server (e.g. http://127.0.0.1:3000)\r\n\r\n## wakeup.js\r\n\r\nThis sample sends a wakeup signal to wake a vehicle in sleep mode.\r\n\r\nUsage:\r\n\r\n    node wakeup.js [options]\r\n\t\r\n\tOptions:\r\n\t\r\n    -h, --help               output usage information\r\n\t-u, --username [string]  username (needed only if token not cached)\r\n\t-p, --password [string]  password (needed only if token not cached)\t\r\n    -i, --index <n>          vehicle index (first car by default)\r\n    -U, --uri [string]       URI of test server (e.g. http://127.0.0.1:3000)\r\n\t\r\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/mseminatore/TeslaJS",
  "_id": "teslajs@2.0.14",
  "_shasum": "3f687302e660bf1e9fd49211540856383216cbb4",
  "_from": "teslajs@"
}
